---
import Action from "@/components/Action.astro";
import Card from "@/components/Card.astro";
import SectionTitle from "@/components/SectionTitle.astro";
import type { PricingData } from "@/config/landing.interface";

interface Props {
  data: PricingData;
}

const { data } = Astro.props;

const paddleClientToken = import.meta.env.PUBLIC_PADDLE_CLIENT_TOKEN;
if (!paddleClientToken) throw new Error("Paddle client token not found");

const paddlePriceIds = import.meta.env.PUBLIC_PADDLE_PRICE_IDS;
if (!paddlePriceIds) throw new Error("Paddle price IDs not found");
---

<section class="mt-48" id="pricing-section">
  <SectionTitle>
    {data.title}
  </SectionTitle>
  <div
    class="my-20 grid grid-cols-1 md:grid-cols-3 gap-y-10 place-items-center"
  >
    {
      data.tiers.map((tier) => (
        <Card>
          <header class="flex items-center justify-center gap-x-5">
            <h3 class="text-4xl text-center font-semibold">{tier.title}</h3>
            <div class="text-sm text-gray-800 text-right">
              {tier.price.trial && (
                <span class="block">{tier.price.trial} days trial</span>
              )}
              {tier.price.renewPrice && (
                <span class="block">
                  Renew at {data.currency + tier.price.renewPrice}
                </span>
              )}
            </div>
          </header>
          <section class="flex justify-center">
            <h4 class="text-6xl font-semibold">
              {data.currency + tier.price.amount}
              {tier.price.period && (
                <span class="font-normal text-xl opacity-85">
                  {tier.price.period}
                </span>
              )}
            </h4>
          </section>
          <footer class="flex justify-center">
            <Action
              as="a"
              class="bg-primary text-white w-72 buy_button"
              type="button"
              data-price={tier.price.amount}
              data-tier={tier.title.toLowerCase()}
            >
              Buy Now
            </Action>
          </footer>
        </Card>
      ))
    }
  </div>
  <div class="md:w-3/4 text-center mx-auto">
    <p>
      Once you have paid, the Pro Key will be sent to your email. You can
      continue to use all previously released versions if you decide to not
      renew. For support, please use the Discord/email/form below.
    </p>
  </div>
</section>

<script>
  import * as paddle from "@paddle/paddle-js";

  const isPaddleSandbox = import.meta.env.PUBLIC_PADDLE_SANDBOX === "1";

  const paddleClientToken = import.meta.env.PUBLIC_PADDLE_CLIENT_TOKEN;
  if (!paddleClientToken) throw new Error("Paddle client token not found");

  const _paddlePriceIds = import.meta.env.PUBLIC_PADDLE_PRICE_IDS;
  if (!_paddlePriceIds) throw new Error("Paddle price IDs not found");
  const paddlePriceIds = JSON.parse(_paddlePriceIds);

  const paddleSdk = await paddle.initializePaddle({
    token: paddleClientToken,
    environment: isPaddleSandbox ? "sandbox" : undefined,
  });
  if (!paddleSdk) throw new Error("Paddle SDK could not be initialized");

  const buyButtons = document.querySelectorAll<HTMLDivElement>(".buy_button");

  for (const button of buyButtons) {
    const tier = button.getAttribute("data-tier");
    if (!tier)
      throw new Error("No data-tier attribute found on buy_button element");
    const priceId = paddlePriceIds[tier];
    button.addEventListener("click", () => {
      paddleSdk.Checkout.open({
        items: [{ priceId, quantity: 1 }],
      });
    });
  }
</script>
